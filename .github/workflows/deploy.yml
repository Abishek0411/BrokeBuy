name: Deploy to Production Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        # Install sshpass for password authentication
        sudo apt-get update && sudo apt-get install -y sshpass
        
    - name: Deploy to server
      run: |
        # Create deployment script
        cat > deploy-ci.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting CI/CD Deployment..."
        
        # Configuration
        SERVER_PATH="/home/srmadmin/brokebuy"
        FRONTEND_PATH="/home/srmadmin/proj_BrokeBuy_frontend"
        SCRAPER_PATH="/home/srmadmin/SRM-Academia-Scraper-node-main"
        
        # Create directories
        mkdir -p $SERVER_PATH
        mkdir -p $FRONTEND_PATH
        mkdir -p $SCRAPER_PATH
        
        # Copy backend files
        echo "üì¶ Copying backend files..."
        cp -r ./* $SERVER_PATH/
        
        # Copy frontend files (if exists)
        if [ -d "../proj_BrokeBuy_frontend" ]; then
          echo "üì¶ Copying frontend files..."
          cp -r ../proj_BrokeBuy_frontend/* $FRONTEND_PATH/
        fi
        
        # Copy scraper files (if exists)
        if [ -d "../SRM-Academia-Scraper-node-main" ]; then
          echo "üì¶ Copying scraper files..."
          cp -r ../SRM-Academia-Scraper-node-main/* $SCRAPER_PATH/
        fi
        
        # Navigate to backend directory
        cd $SERVER_PATH
        
        # Stop existing services
        echo "üõë Stopping existing services..."
        docker-compose -f docker-compose.prod.yml down || true
        
        # Pull latest images and rebuild
        echo "üî® Building and starting services..."
        docker-compose -f docker-compose.prod.yml up -d --build
        
        # Wait for services to be ready
        echo "‚è≥ Waiting for services to start..."
        sleep 30
        
        # Health check
        echo "üîç Checking service health..."
        if curl -f http://localhost:8000/health > /dev/null 2>&1; then
          echo "‚úÖ Backend: Healthy"
        else
          echo "‚ùå Backend: Unhealthy"
          exit 1
        fi
        
        if curl -f http://localhost:3001/health > /dev/null 2>&1; then
          echo "‚úÖ Scraper: Healthy"
        else
          echo "‚ùå Scraper: Unhealthy"
          exit 1
        fi
        
        if curl -f http://localhost/ > /dev/null 2>&1; then
          echo "‚úÖ Frontend: Healthy"
        else
          echo "‚ùå Frontend: Unhealthy"
          exit 1
        fi
        
        echo "üéâ Deployment completed successfully!"
        echo "Services available at:"
        echo "  Frontend: http://172.16.0.60"
        echo "  Backend API: http://172.16.0.60:8000"
        echo "  API Docs: http://172.16.0.60:8000/docs"
        echo "  Scraper: http://172.16.0.60:3001"
        EOF
        
        # Make script executable and run it
        chmod +x deploy-ci.sh
        
        # Copy files to server and run deployment
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no -r . srmadmin@172.16.0.60:/tmp/brokebuy-deploy/
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no -r ../proj_BrokeBuy_frontend srmadmin@172.16.0.60:/tmp/brokebuy-deploy/ || true
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no -r ../SRM-Academia-Scraper-node-main srmadmin@172.16.0.60:/tmp/brokebuy-deploy/ || true
        
        # Run deployment on server
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no srmadmin@172.16.0.60 "cd /tmp/brokebuy-deploy && ./deploy-ci.sh"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi
